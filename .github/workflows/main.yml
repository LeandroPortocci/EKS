# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_test:
    name: Build & Test App
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci 
      # build and test the apps     
      - name: build & test
        run: |
          npm run build
          npm run test
  push_to_Docker_Hub:
      name: Push Images to DockerHub
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      # build docker image and push to docker hub
      # only if the app build and test successfully
      needs: [build_test]

      steps:
        - name: checkout repo
          uses: actions/checkout@v2

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v1
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
##            tags: ${{ secrets.DOCKERHUB_USERNAME }}/aleyant-demo:prod-version
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/aleyant-demo:dev
          
        - name: Run the image in a container
          uses: addnab/docker-run-action@v3
          with:
##            image: ${{ secrets.DOCKERHUB_USERNAME }}/aleyant-demo:prod-version
            image: ${{ secrets.DOCKERHUB_USERNAME }}/aleyant-demo:dev
            run: |
              echo "runing the docker image"
              echo "Testing the nodejs  app endpoints"
              echo ${{ steps.docker_build.outputs.digest }}
  deploy_to_aws_eks:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    # only deploy to AWS EKS if and after push_to_Docker_Hub successed
    needs: [push_to_Docker_Hub]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Validate AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          cluster_name: ${{ secrets.EKS_CLUSTER_NAME }}
      # Deploy the app using kubernetes (deploy.yml)
      - name: Deploy to EKS
          # To run kubectl commands against a cluster created in Cloud Console, 
          # from another computer, or by another member of the project, 
          # you need to generate a kubeconfig entry in your environment...
        run: |
            aws eks update-kubeconfig --name demo-aws-eks --profile default
            kubectl apply -f deploy.yml
            kubectl get all
